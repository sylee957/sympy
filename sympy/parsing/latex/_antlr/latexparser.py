
# encoding: utf-8

# *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
#
# Generated from ../LaTeX.g4, derived from latex2sympy
#     latex2sympy is licensed under the MIT license
#     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
#
# Generated with antlr4
#    antlr4 is licensed under the BSD-3-Clause License
#    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"K\u014c\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t")
        buf.write(u"\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write(u"\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4")
        buf.write(u"\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30")
        buf.write(u"\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t")
        buf.write(u"\35\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\7\3b\n\3\f\3\16\3e\13\3\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4v\n\4\3\5\3\5\5")
        buf.write(u"\5z\n\5\3\5\3\5\3\5\5\5\177\n\5\3\6\3\6\3\6\3\6\3\6\3")
        buf.write(u"\7\7\7\u0087\n\7\f\7\16\7\u008a\13\7\3\b\3\b\3\b\3\b")
        buf.write(u"\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write(u"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5")
        buf.write(u"\13\u00a6\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3")
        buf.write(u"\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\17\3\17\5\17\u00bc")
        buf.write(u"\n\17\3\17\3\17\5\17\u00c0\n\17\3\20\3\20\5\20\u00c4")
        buf.write(u"\n\20\3\20\5\20\u00c7\n\20\3\20\5\20\u00ca\n\20\3\20")
        buf.write(u"\5\20\u00cd\n\20\5\20\u00cf\n\20\3\20\3\20\5\20\u00d3")
        buf.write(u"\n\20\3\21\3\21\3\21\3\21\3\21\5\21\u00da\n\21\3\21\3")
        buf.write(u"\21\3\21\3\21\3\22\3\22\5\22\u00e2\n\22\3\22\3\22\3\22")
        buf.write(u"\3\22\7\22\u00e8\n\22\f\22\16\22\u00eb\13\22\3\22\3\22")
        buf.write(u"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u00f6\n\23\3")
        buf.write(u"\23\5\23\u00f9\n\23\3\23\3\23\3\24\3\24\3\24\3\24\3\25")
        buf.write(u"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u010a\n")
        buf.write(u"\25\3\25\3\25\3\26\3\26\3\26\3\26\7\26\u0112\n\26\f\26")
        buf.write(u"\16\26\u0115\13\26\3\26\3\26\3\27\3\27\3\27\3\27\3\30")
        buf.write(u"\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0126\n")
        buf.write(u"\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32")
        buf.write(u"\u0131\n\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\5")
        buf.write(u"\33\u013b\n\33\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0143")
        buf.write(u"\n\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\2\3\4\36")
        buf.write(u"\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write(u"\64\668\2\b\4\2\17\17\678\5\2\20\2099AA\4\2CCKK\3\2;")
        buf.write(u"=\4\2!!#\65\3\2\r\16\2\u0165\2:\3\2\2\2\4<\3\2\2\2\6")
        buf.write(u"u\3\2\2\2\b~\3\2\2\2\n\u0080\3\2\2\2\f\u0088\3\2\2\2")
        buf.write(u"\16\u008b\3\2\2\2\20\u008f\3\2\2\2\22\u0092\3\2\2\2\24")
        buf.write(u"\u00a5\3\2\2\2\26\u00a7\3\2\2\2\30\u00af\3\2\2\2\32\u00b7")
        buf.write(u"\3\2\2\2\34\u00b9\3\2\2\2\36\u00c1\3\2\2\2 \u00d4\3\2")
        buf.write(u"\2\2\"\u00df\3\2\2\2$\u00ee\3\2\2\2&\u00fc\3\2\2\2(\u0100")
        buf.write(u"\3\2\2\2*\u010d\3\2\2\2,\u0118\3\2\2\2.\u011c\3\2\2\2")
        buf.write(u"\60\u011e\3\2\2\2\62\u0129\3\2\2\2\64\u0134\3\2\2\2\66")
        buf.write(u"\u013c\3\2\2\28\u0144\3\2\2\2:;\5\4\3\2;\3\3\2\2\2<=")
        buf.write(u"\b\3\1\2=>\5\6\4\2>c\3\2\2\2?@\f\17\2\2@A\7@\2\2Ab\5")
        buf.write(u"\4\3\20BC\f\r\2\2CD\t\2\2\2Db\5\4\3\16EF\f\f\2\2FG\t")
        buf.write(u"\3\2\2Gb\5\4\3\rHI\f\13\2\2IJ\7\r\2\2Jb\5\4\3\fKL\f\n")
        buf.write(u"\2\2LM\7\16\2\2Mb\5\4\3\13NO\f\t\2\2OP\7E\2\2Pb\5\4\3")
        buf.write(u"\nQR\f\b\2\2RS\7F\2\2Sb\5\4\3\tTU\f\7\2\2UV\7G\2\2Vb")
        buf.write(u"\5\4\3\bWX\f\6\2\2XY\7H\2\2Yb\5\4\3\7Z[\f\5\2\2[\\\7")
        buf.write(u"I\2\2\\b\5\4\3\6]^\f\4\2\2^b\5\4\3\5_`\f\16\2\2`b\7J")
        buf.write(u"\2\2a?\3\2\2\2aB\3\2\2\2aE\3\2\2\2aH\3\2\2\2aK\3\2\2")
        buf.write(u"\2aN\3\2\2\2aQ\3\2\2\2aT\3\2\2\2aW\3\2\2\2aZ\3\2\2\2")
        buf.write(u"a]\3\2\2\2a_\3\2\2\2be\3\2\2\2ca\3\2\2\2cd\3\2\2\2d\5")
        buf.write(u"\3\2\2\2ec\3\2\2\2fv\5\20\t\2gv\5\22\n\2hv\5\24\13\2")
        buf.write(u"iv\5\16\b\2jv\5\26\f\2kv\5\30\r\2lv\5 \21\2mv\5\36\20")
        buf.write(u"\2nv\5&\24\2ov\5$\23\2pv\5\60\31\2qv\5\62\32\2rv\5\34")
        buf.write(u"\17\2sv\5\"\22\2tv\5\b\5\2uf\3\2\2\2ug\3\2\2\2uh\3\2")
        buf.write(u"\2\2ui\3\2\2\2uj\3\2\2\2uk\3\2\2\2ul\3\2\2\2um\3\2\2")
        buf.write(u"\2un\3\2\2\2uo\3\2\2\2up\3\2\2\2uq\3\2\2\2ur\3\2\2\2")
        buf.write(u"us\3\2\2\2ut\3\2\2\2v\7\3\2\2\2wy\t\4\2\2xz\5\64\33\2")
        buf.write(u"yx\3\2\2\2yz\3\2\2\2z\177\3\2\2\2{\177\7D\2\2|\177\7")
        buf.write(u"B\2\2}\177\5\n\6\2~w\3\2\2\2~{\3\2\2\2~|\3\2\2\2~}\3")
        buf.write(u"\2\2\2\177\t\3\2\2\2\u0080\u0081\7>\2\2\u0081\u0082\7")
        buf.write(u"\23\2\2\u0082\u0083\5\f\7\2\u0083\u0084\7\24\2\2\u0084")
        buf.write(u"\13\3\2\2\2\u0085\u0087\7C\2\2\u0086\u0085\3\2\2\2\u0087")
        buf.write(u"\u008a\3\2\2\2\u0088\u0086\3\2\2\2\u0088\u0089\3\2\2")
        buf.write(u"\2\u0089\r\3\2\2\2\u008a\u0088\3\2\2\2\u008b\u008c\7")
        buf.write(u"\33\2\2\u008c\u008d\5\4\3\2\u008d\u008e\7\33\2\2\u008e")
        buf.write(u"\17\3\2\2\2\u008f\u0090\7\r\2\2\u0090\u0091\5\4\3\2\u0091")
        buf.write(u"\21\3\2\2\2\u0092\u0093\7\16\2\2\u0093\u0094\5\4\3\2")
        buf.write(u"\u0094\23\3\2\2\2\u0095\u0096\7\23\2\2\u0096\u0097\5")
        buf.write(u"\4\3\2\u0097\u0098\7\24\2\2\u0098\u00a6\3\2\2\2\u0099")
        buf.write(u"\u009a\7\21\2\2\u009a\u009b\5\4\3\2\u009b\u009c\7\22")
        buf.write(u"\2\2\u009c\u00a6\3\2\2\2\u009d\u009e\7\27\2\2\u009e\u009f")
        buf.write(u"\5\4\3\2\u009f\u00a0\7\30\2\2\u00a0\u00a6\3\2\2\2\u00a1")
        buf.write(u"\u00a2\7\25\2\2\u00a2\u00a3\5\4\3\2\u00a3\u00a4\7\26")
        buf.write(u"\2\2\u00a4\u00a6\3\2\2\2\u00a5\u0095\3\2\2\2\u00a5\u0099")
        buf.write(u"\3\2\2\2\u00a5\u009d\3\2\2\2\u00a5\u00a1\3\2\2\2\u00a6")
        buf.write(u"\25\3\2\2\2\u00a7\u00a8\7:\2\2\u00a8\u00a9\7\23\2\2\u00a9")
        buf.write(u"\u00aa\5\4\3\2\u00aa\u00ab\7\24\2\2\u00ab\u00ac\7\23")
        buf.write(u"\2\2\u00ac\u00ad\5\4\3\2\u00ad\u00ae\7\24\2\2\u00ae\27")
        buf.write(u"\3\2\2\2\u00af\u00b0\t\5\2\2\u00b0\u00b1\7\23\2\2\u00b1")
        buf.write(u"\u00b2\5\4\3\2\u00b2\u00b3\7\24\2\2\u00b3\u00b4\7\23")
        buf.write(u"\2\2\u00b4\u00b5\5\4\3\2\u00b5\u00b6\7\24\2\2\u00b6\31")
        buf.write(u"\3\2\2\2\u00b7\u00b8\t\6\2\2\u00b8\33\3\2\2\2\u00b9\u00bb")
        buf.write(u"\5\32\16\2\u00ba\u00bc\5\66\34\2\u00bb\u00ba\3\2\2\2")
        buf.write(u"\u00bb\u00bc\3\2\2\2\u00bc\u00bf\3\2\2\2\u00bd\u00c0")
        buf.write(u"\5,\27\2\u00be\u00c0\5.\30\2\u00bf\u00bd\3\2\2\2\u00bf")
        buf.write(u"\u00be\3\2\2\2\u00c0\35\3\2\2\2\u00c1\u00ce\7\"\2\2\u00c2")
        buf.write(u"\u00c4\5\64\33\2\u00c3\u00c2\3\2\2\2\u00c3\u00c4\3\2")
        buf.write(u"\2\2\u00c4\u00c6\3\2\2\2\u00c5\u00c7\5\66\34\2\u00c6")
        buf.write(u"\u00c5\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00cf\3\2\2")
        buf.write(u"\2\u00c8\u00ca\5\66\34\2\u00c9\u00c8\3\2\2\2\u00c9\u00ca")
        buf.write(u"\3\2\2\2\u00ca\u00cc\3\2\2\2\u00cb\u00cd\5\64\33\2\u00cc")
        buf.write(u"\u00cb\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00cf\3\2\2")
        buf.write(u"\2\u00ce\u00c3\3\2\2\2\u00ce\u00c9\3\2\2\2\u00cf\u00d2")
        buf.write(u"\3\2\2\2\u00d0\u00d3\5,\27\2\u00d1\u00d3\5.\30\2\u00d2")
        buf.write(u"\u00d0\3\2\2\2\u00d2\u00d1\3\2\2\2\u00d3\37\3\2\2\2\u00d4")
        buf.write(u"\u00d9\7\66\2\2\u00d5\u00d6\7\27\2\2\u00d6\u00d7\5\4")
        buf.write(u"\3\2\u00d7\u00d8\7\30\2\2\u00d8\u00da\3\2\2\2\u00d9\u00d5")
        buf.write(u"\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00db\3\2\2\2\u00db")
        buf.write(u"\u00dc\7\23\2\2\u00dc\u00dd\5\4\3\2\u00dd\u00de\7\24")
        buf.write(u"\2\2\u00de!\3\2\2\2\u00df\u00e1\t\4\2\2\u00e0\u00e2\5")
        buf.write(u"\64\33\2\u00e1\u00e0\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2")
        buf.write(u"\u00e3\3\2\2\2\u00e3\u00e4\7\21\2\2\u00e4\u00e9\5\4\3")
        buf.write(u"\2\u00e5\u00e6\7\3\2\2\u00e6\u00e8\5\4\3\2\u00e7\u00e5")
        buf.write(u"\3\2\2\2\u00e8\u00eb\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9")
        buf.write(u"\u00ea\3\2\2\2\u00ea\u00ec\3\2\2\2\u00eb\u00e9\3\2\2")
        buf.write(u"\2\u00ec\u00ed\7\22\2\2\u00ed#\3\2\2\2\u00ee\u00f5\7")
        buf.write(u"\36\2\2\u00ef\u00f0\5\64\33\2\u00f0\u00f1\5\66\34\2\u00f1")
        buf.write(u"\u00f6\3\2\2\2\u00f2\u00f3\5\66\34\2\u00f3\u00f4\5\64")
        buf.write(u"\33\2\u00f4\u00f6\3\2\2\2\u00f5\u00ef\3\2\2\2\u00f5\u00f2")
        buf.write(u"\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00f8\3\2\2\2\u00f7")
        buf.write(u"\u00f9\5\4\3\2\u00f8\u00f7\3\2\2\2\u00f8\u00f9\3\2\2")
        buf.write(u"\2\u00f9\u00fa\3\2\2\2\u00fa\u00fb\7B\2\2\u00fb%\3\2")
        buf.write(u"\2\2\u00fc\u00fd\7\34\2\2\u00fd\u00fe\5(\25\2\u00fe\u00ff")
        buf.write(u"\5\4\3\2\u00ff\'\3\2\2\2\u0100\u0101\7?\2\2\u0101\u0102")
        buf.write(u"\7\23\2\2\u0102\u0103\t\4\2\2\u0103\u0104\7\35\2\2\u0104")
        buf.write(u"\u0109\5\4\3\2\u0105\u0106\7@\2\2\u0106\u0107\7\23\2")
        buf.write(u"\2\u0107\u0108\t\7\2\2\u0108\u010a\7\24\2\2\u0109\u0105")
        buf.write(u"\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010b\3\2\2\2\u010b")
        buf.write(u"\u010c\7\24\2\2\u010c)\3\2\2\2\u010d\u010e\7\21\2\2\u010e")
        buf.write(u"\u0113\5\4\3\2\u010f\u0110\7\3\2\2\u0110\u0112\5\4\3")
        buf.write(u"\2\u0111\u010f\3\2\2\2\u0112\u0115\3\2\2\2\u0113\u0111")
        buf.write(u"\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0116\3\2\2\2\u0115")
        buf.write(u"\u0113\3\2\2\2\u0116\u0117\7\22\2\2\u0117+\3\2\2\2\u0118")
        buf.write(u"\u0119\7\21\2\2\u0119\u011a\5\4\3\2\u011a\u011b\7\22")
        buf.write(u"\2\2\u011b-\3\2\2\2\u011c\u011d\5\6\4\2\u011d/\3\2\2")
        buf.write(u"\2\u011e\u0125\7\37\2\2\u011f\u0120\58\35\2\u0120\u0121")
        buf.write(u"\5\66\34\2\u0121\u0126\3\2\2\2\u0122\u0123\5\66\34\2")
        buf.write(u"\u0123\u0124\58\35\2\u0124\u0126\3\2\2\2\u0125\u011f")
        buf.write(u"\3\2\2\2\u0125\u0122\3\2\2\2\u0126\u0127\3\2\2\2\u0127")
        buf.write(u"\u0128\5\4\3\2\u0128\61\3\2\2\2\u0129\u0130\7 \2\2\u012a")
        buf.write(u"\u012b\58\35\2\u012b\u012c\5\66\34\2\u012c\u0131\3\2")
        buf.write(u"\2\2\u012d\u012e\5\66\34\2\u012e\u012f\58\35\2\u012f")
        buf.write(u"\u0131\3\2\2\2\u0130\u012a\3\2\2\2\u0130\u012d\3\2\2")
        buf.write(u"\2\u0131\u0132\3\2\2\2\u0132\u0133\5\4\3\2\u0133\63\3")
        buf.write(u"\2\2\2\u0134\u013a\7?\2\2\u0135\u013b\5\b\5\2\u0136\u0137")
        buf.write(u"\7\23\2\2\u0137\u0138\5\4\3\2\u0138\u0139\7\24\2\2\u0139")
        buf.write(u"\u013b\3\2\2\2\u013a\u0135\3\2\2\2\u013a\u0136\3\2\2")
        buf.write(u"\2\u013b\65\3\2\2\2\u013c\u0142\7@\2\2\u013d\u0143\5")
        buf.write(u"\b\5\2\u013e\u013f\7\23\2\2\u013f\u0140\5\4\3\2\u0140")
        buf.write(u"\u0141\7\24\2\2\u0141\u0143\3\2\2\2\u0142\u013d\3\2\2")
        buf.write(u"\2\u0142\u013e\3\2\2\2\u0143\67\3\2\2\2\u0144\u0145\7")
        buf.write(u"?\2\2\u0145\u0146\7\23\2\2\u0146\u0147\5\4\3\2\u0147")
        buf.write(u"\u0148\7E\2\2\u0148\u0149\5\4\3\2\u0149\u014a\7\24\2")
        buf.write(u"\2\u014a9\3\2\2\2\34acuy~\u0088\u00a5\u00bb\u00bf\u00c3")
        buf.write(u"\u00c6\u00c9\u00cc\u00ce\u00d2\u00d9\u00e1\u00e9\u00f5")
        buf.write(u"\u00f8\u0109\u0113\u0125\u0130\u013a\u0142")
        return buf.getvalue()


class LaTeXParser ( Parser ):

    grammarFileName = "LaTeX.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"','", u"<INVALID>", u"<INVALID>", u"<INVALID>",
                     u"<INVALID>", u"'\\quad'", u"'\\qquad'", u"<INVALID>",
                     u"'\\negmedspace'", u"'\\negthickspace'", u"'+'", u"'-'",
                     u"'*'", u"'/'", u"'('", u"')'", u"'{'", u"'}'", u"'\\{'",
                     u"'\\}'", u"'['", u"']'", u"'\\left'", u"'\\right'",
                     u"'|'", u"'\\lim'", u"<INVALID>", u"'\\int'", u"'\\sum'",
                     u"'\\prod'", u"'\\exp'", u"'\\log'", u"'\\ln'", u"'\\sin'",
                     u"'\\cos'", u"'\\tan'", u"'\\csc'", u"'\\sec'", u"'\\cot'",
                     u"'\\arcsin'", u"'\\arccos'", u"'\\arctan'", u"'\\arccsc'",
                     u"'\\arcsec'", u"'\\arccot'", u"'\\sinh'", u"'\\cosh'",
                     u"'\\tanh'", u"'\\arsinh'", u"'\\arcosh'", u"'\\artanh'",
                     u"'\\sqrt'", u"'\\times'", u"'\\cdot'", u"'\\div'",
                     u"'\\frac'", u"'\\binom'", u"'\\dbinom'", u"'\\tbinom'",
                     u"'\\mathit'", u"'_'", u"'^'", u"':'", u"<INVALID>",
                     u"<INVALID>", u"<INVALID>", u"'='", u"'<'", u"'\\leq'",
                     u"'>'", u"'\\geq'", u"'!'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"WS", u"THINSPACE", u"MEDSPACE",
                      u"THICKSPACE", u"QUAD", u"QQUAD", u"NEGTHINSPACE",
                      u"NEGMEDSPACE", u"NEGTHICKSPACE", u"ADD", u"SUB",
                      u"MUL", u"DIV", u"L_PAREN", u"R_PAREN", u"L_BRACE",
                      u"R_BRACE", u"L_BRACE_LITERAL", u"R_BRACE_LITERAL",
                      u"L_BRACKET", u"R_BRACKET", u"CMD_LEFT", u"CMD_RIGHT",
                      u"BAR", u"FUNC_LIM", u"LIM_APPROACH_SYM", u"FUNC_INT",
                      u"FUNC_SUM", u"FUNC_PROD", u"FUNC_EXP", u"FUNC_LOG",
                      u"FUNC_LN", u"FUNC_SIN", u"FUNC_COS", u"FUNC_TAN",
                      u"FUNC_CSC", u"FUNC_SEC", u"FUNC_COT", u"FUNC_ARCSIN",
                      u"FUNC_ARCCOS", u"FUNC_ARCTAN", u"FUNC_ARCCSC", u"FUNC_ARCSEC",
                      u"FUNC_ARCCOT", u"FUNC_SINH", u"FUNC_COSH", u"FUNC_TANH",
                      u"FUNC_ARSINH", u"FUNC_ARCOSH", u"FUNC_ARTANH", u"FUNC_SQRT",
                      u"CMD_TIMES", u"CMD_CDOT", u"CMD_DIV", u"CMD_FRAC",
                      u"CMD_BINOM", u"CMD_DBINOM", u"CMD_TBINOM", u"CMD_MATHIT",
                      u"UNDERSCORE", u"CARET", u"COLON", u"DIFFERENTIAL",
                      u"LETTER", u"NUMBER", u"EQUAL", u"LT", u"LTE", u"GT",
                      u"GTE", u"BANG", u"SYMBOL" ]

    RULE_math = 0
    RULE_expr = 1
    RULE_special = 2
    RULE_atom = 3
    RULE_mathit = 4
    RULE_mathit_text = 5
    RULE_absolute_value = 6
    RULE_unary_add = 7
    RULE_unary_sub = 8
    RULE_paren = 9
    RULE_frac = 10
    RULE_binom = 11
    RULE_func_normal = 12
    RULE_amsmath_func = 13
    RULE_log = 14
    RULE_sqrt = 15
    RULE_user_func = 16
    RULE_integral = 17
    RULE_limit = 18
    RULE_limit_sub = 19
    RULE_func_args_parens = 20
    RULE_func_arg_parens = 21
    RULE_func_arg_noparens = 22
    RULE_summation = 23
    RULE_product = 24
    RULE_subexpr = 25
    RULE_supexpr = 26
    RULE_subeq = 27

    ruleNames =  [ u"math", u"expr", u"special", u"atom", u"mathit", u"mathit_text",
                   u"absolute_value", u"unary_add", u"unary_sub", u"paren",
                   u"frac", u"binom", u"func_normal", u"amsmath_func", u"log",
                   u"sqrt", u"user_func", u"integral", u"limit", u"limit_sub",
                   u"func_args_parens", u"func_arg_parens", u"func_arg_noparens",
                   u"summation", u"product", u"subexpr", u"supexpr", u"subeq" ]

    EOF = Token.EOF
    T__0=1
    WS=2
    THINSPACE=3
    MEDSPACE=4
    THICKSPACE=5
    QUAD=6
    QQUAD=7
    NEGTHINSPACE=8
    NEGMEDSPACE=9
    NEGTHICKSPACE=10
    ADD=11
    SUB=12
    MUL=13
    DIV=14
    L_PAREN=15
    R_PAREN=16
    L_BRACE=17
    R_BRACE=18
    L_BRACE_LITERAL=19
    R_BRACE_LITERAL=20
    L_BRACKET=21
    R_BRACKET=22
    CMD_LEFT=23
    CMD_RIGHT=24
    BAR=25
    FUNC_LIM=26
    LIM_APPROACH_SYM=27
    FUNC_INT=28
    FUNC_SUM=29
    FUNC_PROD=30
    FUNC_EXP=31
    FUNC_LOG=32
    FUNC_LN=33
    FUNC_SIN=34
    FUNC_COS=35
    FUNC_TAN=36
    FUNC_CSC=37
    FUNC_SEC=38
    FUNC_COT=39
    FUNC_ARCSIN=40
    FUNC_ARCCOS=41
    FUNC_ARCTAN=42
    FUNC_ARCCSC=43
    FUNC_ARCSEC=44
    FUNC_ARCCOT=45
    FUNC_SINH=46
    FUNC_COSH=47
    FUNC_TANH=48
    FUNC_ARSINH=49
    FUNC_ARCOSH=50
    FUNC_ARTANH=51
    FUNC_SQRT=52
    CMD_TIMES=53
    CMD_CDOT=54
    CMD_DIV=55
    CMD_FRAC=56
    CMD_BINOM=57
    CMD_DBINOM=58
    CMD_TBINOM=59
    CMD_MATHIT=60
    UNDERSCORE=61
    CARET=62
    COLON=63
    DIFFERENTIAL=64
    LETTER=65
    NUMBER=66
    EQUAL=67
    LT=68
    LTE=69
    GT=70
    GTE=71
    BANG=72
    SYMBOL=73

    def __init__(self, input, output=sys.stdout):
        super(LaTeXParser, self).__init__(input, output=output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class MathContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.MathContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_math




    def math(self):

        localctx = LaTeXParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_math)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 56
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.ExprContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LaTeXParser.RULE_expr


        def copyFrom(self, ctx):
            super(LaTeXParser.ExprContext, self).copyFrom(ctx)


    class AddContext(ExprContext):

        def __init__(self, parser, ctx): # actually a LaTeXParser.ExprContext)
            super(LaTeXParser.AddContext, self).__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)



    class SubContext(ExprContext):

        def __init__(self, parser, ctx): # actually a LaTeXParser.ExprContext)
            super(LaTeXParser.SubContext, self).__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)



    class SpecialsContext(ExprContext):

        def __init__(self, parser, ctx): # actually a LaTeXParser.ExprContext)
            super(LaTeXParser.SpecialsContext, self).__init__(parser)
            self.copyFrom(ctx)

        def special(self):
            return self.getTypedRuleContext(LaTeXParser.SpecialContext,0)



    class MulContext(ExprContext):

        def __init__(self, parser, ctx): # actually a LaTeXParser.ExprContext)
            super(LaTeXParser.MulContext, self).__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)

        def MUL(self):
            return self.getToken(LaTeXParser.MUL, 0)
        def CMD_TIMES(self):
            return self.getToken(LaTeXParser.CMD_TIMES, 0)
        def CMD_CDOT(self):
            return self.getToken(LaTeXParser.CMD_CDOT, 0)


    class LessEqualContext(ExprContext):

        def __init__(self, parser, ctx): # actually a LaTeXParser.ExprContext)
            super(LaTeXParser.LessEqualContext, self).__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def LTE(self):
            return self.getToken(LaTeXParser.LTE, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)



    class DivContext(ExprContext):

        def __init__(self, parser, ctx): # actually a LaTeXParser.ExprContext)
            super(LaTeXParser.DivContext, self).__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)

        def DIV(self):
            return self.getToken(LaTeXParser.DIV, 0)
        def CMD_DIV(self):
            return self.getToken(LaTeXParser.CMD_DIV, 0)
        def COLON(self):
            return self.getToken(LaTeXParser.COLON, 0)


    class FactorialContext(ExprContext):

        def __init__(self, parser, ctx): # actually a LaTeXParser.ExprContext)
            super(LaTeXParser.FactorialContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)

        def BANG(self):
            return self.getToken(LaTeXParser.BANG, 0)


    class GreaterEqualContext(ExprContext):

        def __init__(self, parser, ctx): # actually a LaTeXParser.ExprContext)
            super(LaTeXParser.GreaterEqualContext, self).__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def GTE(self):
            return self.getToken(LaTeXParser.GTE, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)



    class EqualsContext(ExprContext):

        def __init__(self, parser, ctx): # actually a LaTeXParser.ExprContext)
            super(LaTeXParser.EqualsContext, self).__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)



    class LessThanContext(ExprContext):

        def __init__(self, parser, ctx): # actually a LaTeXParser.ExprContext)
            super(LaTeXParser.LessThanContext, self).__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(LaTeXParser.LT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)



    class GreaterThanContext(ExprContext):

        def __init__(self, parser, ctx): # actually a LaTeXParser.ExprContext)
            super(LaTeXParser.GreaterThanContext, self).__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def GT(self):
            return self.getToken(LaTeXParser.GT, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)



    class ImplicitMulContext(ExprContext):

        def __init__(self, parser, ctx): # actually a LaTeXParser.ExprContext)
            super(LaTeXParser.ImplicitMulContext, self).__init__(parser)
            self.lhs = None # ExprContext
            self.rhs = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)



    class PowContext(ExprContext):

        def __init__(self, parser, ctx): # actually a LaTeXParser.ExprContext)
            super(LaTeXParser.PowContext, self).__init__(parser)
            self.base = None # ExprContext
            self.exp = None # ExprContext
            self.copyFrom(ctx)

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)
        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)




    def expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 2
        self.enterRecursionRule(localctx, 2, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = LaTeXParser.SpecialsContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 59
            self.special()
            self._ctx.stop = self._input.LT(-1)
            self.state = 97
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 95
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                    if la_ == 1:
                        localctx = LaTeXParser.PowContext(self, LaTeXParser.ExprContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 61
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 62
                        self.match(LaTeXParser.CARET)
                        self.state = 63
                        localctx.exp = self.expr(14)
                        pass

                    elif la_ == 2:
                        localctx = LaTeXParser.MulContext(self, LaTeXParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 64
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 65
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.MUL) | (1 << LaTeXParser.CMD_TIMES) | (1 << LaTeXParser.CMD_CDOT))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 66
                        localctx.rhs = self.expr(12)
                        pass

                    elif la_ == 3:
                        localctx = LaTeXParser.DivContext(self, LaTeXParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 67
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 68
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.DIV) | (1 << LaTeXParser.CMD_DIV) | (1 << LaTeXParser.COLON))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 69
                        localctx.rhs = self.expr(11)
                        pass

                    elif la_ == 4:
                        localctx = LaTeXParser.AddContext(self, LaTeXParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 70
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 71
                        self.match(LaTeXParser.ADD)
                        self.state = 72
                        localctx.rhs = self.expr(10)
                        pass

                    elif la_ == 5:
                        localctx = LaTeXParser.SubContext(self, LaTeXParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 73
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 74
                        self.match(LaTeXParser.SUB)
                        self.state = 75
                        localctx.rhs = self.expr(9)
                        pass

                    elif la_ == 6:
                        localctx = LaTeXParser.EqualsContext(self, LaTeXParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 76
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 77
                        self.match(LaTeXParser.EQUAL)
                        self.state = 78
                        localctx.rhs = self.expr(8)
                        pass

                    elif la_ == 7:
                        localctx = LaTeXParser.LessThanContext(self, LaTeXParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 79
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 80
                        self.match(LaTeXParser.LT)
                        self.state = 81
                        localctx.rhs = self.expr(7)
                        pass

                    elif la_ == 8:
                        localctx = LaTeXParser.LessEqualContext(self, LaTeXParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 82
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 83
                        self.match(LaTeXParser.LTE)
                        self.state = 84
                        localctx.rhs = self.expr(6)
                        pass

                    elif la_ == 9:
                        localctx = LaTeXParser.GreaterThanContext(self, LaTeXParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 85
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 86
                        self.match(LaTeXParser.GT)
                        self.state = 87
                        localctx.rhs = self.expr(5)
                        pass

                    elif la_ == 10:
                        localctx = LaTeXParser.GreaterEqualContext(self, LaTeXParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 88
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 89
                        self.match(LaTeXParser.GTE)
                        self.state = 90
                        localctx.rhs = self.expr(4)
                        pass

                    elif la_ == 11:
                        localctx = LaTeXParser.ImplicitMulContext(self, LaTeXParser.ExprContext(self, _parentctx, _parentState))
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 91
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 92
                        localctx.rhs = self.expr(3)
                        pass

                    elif la_ == 12:
                        localctx = LaTeXParser.FactorialContext(self, LaTeXParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 93
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 94
                        self.match(LaTeXParser.BANG)
                        pass


                self.state = 99
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SpecialContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.SpecialContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unary_add(self):
            return self.getTypedRuleContext(LaTeXParser.Unary_addContext,0)


        def unary_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Unary_subContext,0)


        def paren(self):
            return self.getTypedRuleContext(LaTeXParser.ParenContext,0)


        def absolute_value(self):
            return self.getTypedRuleContext(LaTeXParser.Absolute_valueContext,0)


        def frac(self):
            return self.getTypedRuleContext(LaTeXParser.FracContext,0)


        def binom(self):
            return self.getTypedRuleContext(LaTeXParser.BinomContext,0)


        def sqrt(self):
            return self.getTypedRuleContext(LaTeXParser.SqrtContext,0)


        def log(self):
            return self.getTypedRuleContext(LaTeXParser.LogContext,0)


        def limit(self):
            return self.getTypedRuleContext(LaTeXParser.LimitContext,0)


        def integral(self):
            return self.getTypedRuleContext(LaTeXParser.IntegralContext,0)


        def summation(self):
            return self.getTypedRuleContext(LaTeXParser.SummationContext,0)


        def product(self):
            return self.getTypedRuleContext(LaTeXParser.ProductContext,0)


        def amsmath_func(self):
            return self.getTypedRuleContext(LaTeXParser.Amsmath_funcContext,0)


        def user_func(self):
            return self.getTypedRuleContext(LaTeXParser.User_funcContext,0)


        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_special




    def special(self):

        localctx = LaTeXParser.SpecialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_special)
        try:
            self.state = 115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 100
                self.unary_add()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 101
                self.unary_sub()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 102
                self.paren()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 103
                self.absolute_value()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 104
                self.frac()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 105
                self.binom()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 106
                self.sqrt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 107
                self.log()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 108
                self.limit()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 109
                self.integral()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 110
                self.summation()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 111
                self.product()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 112
                self.amsmath_func()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 113
                self.user_func()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 114
                self.atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.AtomContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def NUMBER(self):
            return self.getToken(LaTeXParser.NUMBER, 0)

        def DIFFERENTIAL(self):
            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)

        def mathit(self):
            return self.getTypedRuleContext(LaTeXParser.MathitContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_atom




    def atom(self):

        localctx = LaTeXParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LaTeXParser.LETTER, LaTeXParser.SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 117
                _la = self._input.LA(1)
                if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 119
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 118
                    self.subexpr()


                pass
            elif token in [LaTeXParser.NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 121
                self.match(LaTeXParser.NUMBER)
                pass
            elif token in [LaTeXParser.DIFFERENTIAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 122
                self.match(LaTeXParser.DIFFERENTIAL)
                pass
            elif token in [LaTeXParser.CMD_MATHIT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 123
                self.mathit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MathitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.MathitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CMD_MATHIT(self):
            return self.getToken(LaTeXParser.CMD_MATHIT, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def mathit_text(self):
            return self.getTypedRuleContext(LaTeXParser.Mathit_textContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mathit




    def mathit(self):

        localctx = LaTeXParser.MathitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_mathit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 126
            self.match(LaTeXParser.CMD_MATHIT)
            self.state = 127
            self.match(LaTeXParser.L_BRACE)
            self.state = 128
            self.mathit_text()
            self.state = 129
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mathit_textContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.Mathit_textContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self, i=None):
            if i is None:
                return self.getTokens(LaTeXParser.LETTER)
            else:
                return self.getToken(LaTeXParser.LETTER, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mathit_text




    def mathit_text(self):

        localctx = LaTeXParser.Mathit_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_mathit_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LaTeXParser.LETTER:
                self.state = 131
                self.match(LaTeXParser.LETTER)
                self.state = 136
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Absolute_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.Absolute_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BAR(self, i=None):
            if i is None:
                return self.getTokens(LaTeXParser.BAR)
            else:
                return self.getToken(LaTeXParser.BAR, i)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_absolute_value




    def absolute_value(self):

        localctx = LaTeXParser.Absolute_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_absolute_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 137
            self.match(LaTeXParser.BAR)
            self.state = 138
            self.expr(0)
            self.state = 139
            self.match(LaTeXParser.BAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_addContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.Unary_addContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_unary_add




    def unary_add(self):

        localctx = LaTeXParser.Unary_addContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unary_add)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 141
            self.match(LaTeXParser.ADD)
            self.state = 142
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_subContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.Unary_subContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_unary_sub




    def unary_sub(self):

        localctx = LaTeXParser.Unary_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unary_sub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 144
            self.match(LaTeXParser.SUB)
            self.state = 145
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.ParenContext, self).__init__(parent, invokingState)
            self.parser = parser

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def L_BRACE_LITERAL(self):
            return self.getToken(LaTeXParser.L_BRACE_LITERAL, 0)

        def R_BRACE_LITERAL(self):
            return self.getToken(LaTeXParser.R_BRACE_LITERAL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_paren




    def paren(self):

        localctx = LaTeXParser.ParenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_paren)
        try:
            self.state = 163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LaTeXParser.L_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 147
                self.match(LaTeXParser.L_BRACE)
                self.state = 148
                self.expr(0)
                self.state = 149
                self.match(LaTeXParser.R_BRACE)
                pass
            elif token in [LaTeXParser.L_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 151
                self.match(LaTeXParser.L_PAREN)
                self.state = 152
                self.expr(0)
                self.state = 153
                self.match(LaTeXParser.R_PAREN)
                pass
            elif token in [LaTeXParser.L_BRACKET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 155
                self.match(LaTeXParser.L_BRACKET)
                self.state = 156
                self.expr(0)
                self.state = 157
                self.match(LaTeXParser.R_BRACKET)
                pass
            elif token in [LaTeXParser.L_BRACE_LITERAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 159
                self.match(LaTeXParser.L_BRACE_LITERAL)
                self.state = 160
                self.expr(0)
                self.state = 161
                self.match(LaTeXParser.R_BRACE_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FracContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.FracContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.upper = None # ExprContext
            self.lower = None # ExprContext

        def CMD_FRAC(self):
            return self.getToken(LaTeXParser.CMD_FRAC, 0)

        def L_BRACE(self, i=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def R_BRACE(self, i=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_frac




    def frac(self):

        localctx = LaTeXParser.FracContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_frac)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 165
            self.match(LaTeXParser.CMD_FRAC)
            self.state = 166
            self.match(LaTeXParser.L_BRACE)
            self.state = 167
            localctx.upper = self.expr(0)
            self.state = 168
            self.match(LaTeXParser.R_BRACE)
            self.state = 169
            self.match(LaTeXParser.L_BRACE)
            self.state = 170
            localctx.lower = self.expr(0)
            self.state = 171
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.BinomContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.n = None # ExprContext
            self.k = None # ExprContext

        def L_BRACE(self, i=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def R_BRACE(self, i=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def CMD_BINOM(self):
            return self.getToken(LaTeXParser.CMD_BINOM, 0)

        def CMD_DBINOM(self):
            return self.getToken(LaTeXParser.CMD_DBINOM, 0)

        def CMD_TBINOM(self):
            return self.getToken(LaTeXParser.CMD_TBINOM, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_binom




    def binom(self):

        localctx = LaTeXParser.BinomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_binom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.CMD_BINOM) | (1 << LaTeXParser.CMD_DBINOM) | (1 << LaTeXParser.CMD_TBINOM))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 174
            self.match(LaTeXParser.L_BRACE)
            self.state = 175
            localctx.n = self.expr(0)
            self.state = 176
            self.match(LaTeXParser.R_BRACE)
            self.state = 177
            self.match(LaTeXParser.L_BRACE)
            self.state = 178
            localctx.k = self.expr(0)
            self.state = 179
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_normalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.Func_normalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FUNC_EXP(self):
            return self.getToken(LaTeXParser.FUNC_EXP, 0)

        def FUNC_LN(self):
            return self.getToken(LaTeXParser.FUNC_LN, 0)

        def FUNC_SIN(self):
            return self.getToken(LaTeXParser.FUNC_SIN, 0)

        def FUNC_COS(self):
            return self.getToken(LaTeXParser.FUNC_COS, 0)

        def FUNC_TAN(self):
            return self.getToken(LaTeXParser.FUNC_TAN, 0)

        def FUNC_CSC(self):
            return self.getToken(LaTeXParser.FUNC_CSC, 0)

        def FUNC_SEC(self):
            return self.getToken(LaTeXParser.FUNC_SEC, 0)

        def FUNC_COT(self):
            return self.getToken(LaTeXParser.FUNC_COT, 0)

        def FUNC_ARCSIN(self):
            return self.getToken(LaTeXParser.FUNC_ARCSIN, 0)

        def FUNC_ARCCOS(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOS, 0)

        def FUNC_ARCTAN(self):
            return self.getToken(LaTeXParser.FUNC_ARCTAN, 0)

        def FUNC_ARCCSC(self):
            return self.getToken(LaTeXParser.FUNC_ARCCSC, 0)

        def FUNC_ARCSEC(self):
            return self.getToken(LaTeXParser.FUNC_ARCSEC, 0)

        def FUNC_ARCCOT(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOT, 0)

        def FUNC_SINH(self):
            return self.getToken(LaTeXParser.FUNC_SINH, 0)

        def FUNC_COSH(self):
            return self.getToken(LaTeXParser.FUNC_COSH, 0)

        def FUNC_TANH(self):
            return self.getToken(LaTeXParser.FUNC_TANH, 0)

        def FUNC_ARSINH(self):
            return self.getToken(LaTeXParser.FUNC_ARSINH, 0)

        def FUNC_ARCOSH(self):
            return self.getToken(LaTeXParser.FUNC_ARCOSH, 0)

        def FUNC_ARTANH(self):
            return self.getToken(LaTeXParser.FUNC_ARTANH, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_func_normal




    def func_normal(self):

        localctx = LaTeXParser.Func_normalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_func_normal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LaTeXParser.FUNC_EXP) | (1 << LaTeXParser.FUNC_LN) | (1 << LaTeXParser.FUNC_SIN) | (1 << LaTeXParser.FUNC_COS) | (1 << LaTeXParser.FUNC_TAN) | (1 << LaTeXParser.FUNC_CSC) | (1 << LaTeXParser.FUNC_SEC) | (1 << LaTeXParser.FUNC_COT) | (1 << LaTeXParser.FUNC_ARCSIN) | (1 << LaTeXParser.FUNC_ARCCOS) | (1 << LaTeXParser.FUNC_ARCTAN) | (1 << LaTeXParser.FUNC_ARCCSC) | (1 << LaTeXParser.FUNC_ARCSEC) | (1 << LaTeXParser.FUNC_ARCCOT) | (1 << LaTeXParser.FUNC_SINH) | (1 << LaTeXParser.FUNC_COSH) | (1 << LaTeXParser.FUNC_TANH) | (1 << LaTeXParser.FUNC_ARSINH) | (1 << LaTeXParser.FUNC_ARCOSH) | (1 << LaTeXParser.FUNC_ARTANH))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Amsmath_funcContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.Amsmath_funcContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.exp = None # SupexprContext

        def func_normal(self):
            return self.getTypedRuleContext(LaTeXParser.Func_normalContext,0)


        def func_arg_parens(self):
            return self.getTypedRuleContext(LaTeXParser.Func_arg_parensContext,0)


        def func_arg_noparens(self):
            return self.getTypedRuleContext(LaTeXParser.Func_arg_noparensContext,0)


        def supexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_amsmath_func




    def amsmath_func(self):

        localctx = LaTeXParser.Amsmath_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_amsmath_func)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            self.func_normal()
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LaTeXParser.CARET:
                self.state = 184
                localctx.exp = self.supexpr()


            self.state = 189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 187
                self.func_arg_parens()
                pass

            elif la_ == 2:
                self.state = 188
                self.func_arg_noparens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.LogContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.base = None # SubexprContext
            self.exp = None # SupexprContext

        def FUNC_LOG(self):
            return self.getToken(LaTeXParser.FUNC_LOG, 0)

        def func_arg_parens(self):
            return self.getTypedRuleContext(LaTeXParser.Func_arg_parensContext,0)


        def func_arg_noparens(self):
            return self.getTypedRuleContext(LaTeXParser.Func_arg_noparensContext,0)


        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def supexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_log




    def log(self):

        localctx = LaTeXParser.LogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_log)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self.match(LaTeXParser.FUNC_LOG)
            self.state = 204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LaTeXParser.UNDERSCORE:
                    self.state = 192
                    localctx.base = self.subexpr()


                self.state = 196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LaTeXParser.CARET:
                    self.state = 195
                    localctx.exp = self.supexpr()


                pass

            elif la_ == 2:
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LaTeXParser.CARET:
                    self.state = 198
                    localctx.exp = self.supexpr()


                self.state = 202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LaTeXParser.UNDERSCORE:
                    self.state = 201
                    localctx.base = self.subexpr()


                pass


            self.state = 208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 206
                self.func_arg_parens()
                pass

            elif la_ == 2:
                self.state = 207
                self.func_arg_noparens()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SqrtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.SqrtContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.root = None # ExprContext
            self.base = None # ExprContext

        def FUNC_SQRT(self):
            return self.getToken(LaTeXParser.FUNC_SQRT, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_sqrt




    def sqrt(self):

        localctx = LaTeXParser.SqrtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_sqrt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self.match(LaTeXParser.FUNC_SQRT)
            self.state = 215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LaTeXParser.L_BRACKET:
                self.state = 211
                self.match(LaTeXParser.L_BRACKET)
                self.state = 212
                localctx.root = self.expr(0)
                self.state = 213
                self.match(LaTeXParser.R_BRACKET)


            self.state = 217
            self.match(LaTeXParser.L_BRACE)
            self.state = 218
            localctx.base = self.expr(0)
            self.state = 219
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class User_funcContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.User_funcContext, self).__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_user_func




    def user_func(self):

        localctx = LaTeXParser.User_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_user_func)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            _la = self._input.LA(1)
            if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LaTeXParser.UNDERSCORE:
                self.state = 222
                self.subexpr()


            self.state = 225
            self.match(LaTeXParser.L_PAREN)
            self.state = 226
            self.expr(0)
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LaTeXParser.T__0:
                self.state = 227
                self.match(LaTeXParser.T__0)
                self.state = 228
                self.expr(0)
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 234
            self.match(LaTeXParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.IntegralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FUNC_INT(self):
            return self.getToken(LaTeXParser.FUNC_INT, 0)

        def DIFFERENTIAL(self):
            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def supexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)


        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_integral




    def integral(self):

        localctx = LaTeXParser.IntegralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_integral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(LaTeXParser.FUNC_INT)
            self.state = 243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LaTeXParser.UNDERSCORE]:
                self.state = 237
                self.subexpr()
                self.state = 238
                self.supexpr()
                pass
            elif token in [LaTeXParser.CARET]:
                self.state = 240
                self.supexpr()
                self.state = 241
                self.subexpr()
                pass
            elif token in [LaTeXParser.ADD, LaTeXParser.SUB, LaTeXParser.L_PAREN, LaTeXParser.L_BRACE, LaTeXParser.L_BRACE_LITERAL, LaTeXParser.L_BRACKET, LaTeXParser.BAR, LaTeXParser.FUNC_LIM, LaTeXParser.FUNC_INT, LaTeXParser.FUNC_SUM, LaTeXParser.FUNC_PROD, LaTeXParser.FUNC_EXP, LaTeXParser.FUNC_LOG, LaTeXParser.FUNC_LN, LaTeXParser.FUNC_SIN, LaTeXParser.FUNC_COS, LaTeXParser.FUNC_TAN, LaTeXParser.FUNC_CSC, LaTeXParser.FUNC_SEC, LaTeXParser.FUNC_COT, LaTeXParser.FUNC_ARCSIN, LaTeXParser.FUNC_ARCCOS, LaTeXParser.FUNC_ARCTAN, LaTeXParser.FUNC_ARCCSC, LaTeXParser.FUNC_ARCSEC, LaTeXParser.FUNC_ARCCOT, LaTeXParser.FUNC_SINH, LaTeXParser.FUNC_COSH, LaTeXParser.FUNC_TANH, LaTeXParser.FUNC_ARSINH, LaTeXParser.FUNC_ARCOSH, LaTeXParser.FUNC_ARTANH, LaTeXParser.FUNC_SQRT, LaTeXParser.CMD_FRAC, LaTeXParser.CMD_BINOM, LaTeXParser.CMD_DBINOM, LaTeXParser.CMD_TBINOM, LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
                pass
            else:
                pass

            self.state = 246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 245
                self.expr(0)


            self.state = 248
            self.match(LaTeXParser.DIFFERENTIAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.LimitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FUNC_LIM(self):
            return self.getToken(LaTeXParser.FUNC_LIM, 0)

        def limit_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Limit_subContext,0)


        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_limit




    def limit(self):

        localctx = LaTeXParser.LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(LaTeXParser.FUNC_LIM)
            self.state = 251
            self.limit_sub()
            self.state = 252
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_subContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.Limit_subContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self, i=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def LIM_APPROACH_SYM(self):
            return self.getToken(LaTeXParser.LIM_APPROACH_SYM, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self, i=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_limit_sub




    def limit_sub(self):

        localctx = LaTeXParser.Limit_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_limit_sub)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 255
            self.match(LaTeXParser.L_BRACE)
            self.state = 256
            _la = self._input.LA(1)
            if not(_la==LaTeXParser.LETTER or _la==LaTeXParser.SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 257
            self.match(LaTeXParser.LIM_APPROACH_SYM)
            self.state = 258
            self.expr(0)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LaTeXParser.CARET:
                self.state = 259
                self.match(LaTeXParser.CARET)
                self.state = 260
                self.match(LaTeXParser.L_BRACE)
                self.state = 261
                _la = self._input.LA(1)
                if not(_la==LaTeXParser.ADD or _la==LaTeXParser.SUB):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 262
                self.match(LaTeXParser.R_BRACE)


            self.state = 265
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_args_parensContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.Func_args_parensContext, self).__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_func_args_parens




    def func_args_parens(self):

        localctx = LaTeXParser.Func_args_parensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_func_args_parens)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(LaTeXParser.L_PAREN)
            self.state = 268
            self.expr(0)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LaTeXParser.T__0:
                self.state = 269
                self.match(LaTeXParser.T__0)
                self.state = 270
                self.expr(0)
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 276
            self.match(LaTeXParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_arg_parensContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.Func_arg_parensContext, self).__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_func_arg_parens




    def func_arg_parens(self):

        localctx = LaTeXParser.Func_arg_parensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_func_arg_parens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(LaTeXParser.L_PAREN)
            self.state = 279
            self.expr(0)
            self.state = 280
            self.match(LaTeXParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_arg_noparensContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.Func_arg_noparensContext, self).__init__(parent, invokingState)
            self.parser = parser

        def special(self):
            return self.getTypedRuleContext(LaTeXParser.SpecialContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_func_arg_noparens




    def func_arg_noparens(self):

        localctx = LaTeXParser.Func_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_func_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.special()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SummationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.SummationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FUNC_SUM(self):
            return self.getToken(LaTeXParser.FUNC_SUM, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def subeq(self):
            return self.getTypedRuleContext(LaTeXParser.SubeqContext,0)


        def supexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_summation




    def summation(self):

        localctx = LaTeXParser.SummationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_summation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.match(LaTeXParser.FUNC_SUM)
            self.state = 291
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LaTeXParser.UNDERSCORE]:
                self.state = 285
                self.subeq()
                self.state = 286
                self.supexpr()
                pass
            elif token in [LaTeXParser.CARET]:
                self.state = 288
                self.supexpr()
                self.state = 289
                self.subeq()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 293
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProductContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.ProductContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FUNC_PROD(self):
            return self.getToken(LaTeXParser.FUNC_PROD, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def subeq(self):
            return self.getTypedRuleContext(LaTeXParser.SubeqContext,0)


        def supexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_product




    def product(self):

        localctx = LaTeXParser.ProductContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_product)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.match(LaTeXParser.FUNC_PROD)
            self.state = 302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LaTeXParser.UNDERSCORE]:
                self.state = 296
                self.subeq()
                self.state = 297
                self.supexpr()
                pass
            elif token in [LaTeXParser.CARET]:
                self.state = 299
                self.supexpr()
                self.state = 300
                self.subeq()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 304
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubexprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.SubexprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_subexpr




    def subexpr(self):

        localctx = LaTeXParser.SubexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
                self.state = 307
                self.atom()
                pass
            elif token in [LaTeXParser.L_BRACE]:
                self.state = 308
                self.match(LaTeXParser.L_BRACE)
                self.state = 309
                self.expr(0)
                self.state = 310
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupexprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.SupexprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_supexpr




    def supexpr(self):

        localctx = LaTeXParser.SupexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_supexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(LaTeXParser.CARET)
            self.state = 320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LaTeXParser.CMD_MATHIT, LaTeXParser.DIFFERENTIAL, LaTeXParser.LETTER, LaTeXParser.NUMBER, LaTeXParser.SYMBOL]:
                self.state = 315
                self.atom()
                pass
            elif token in [LaTeXParser.L_BRACE]:
                self.state = 316
                self.match(LaTeXParser.L_BRACE)
                self.state = 317
                self.expr(0)
                self.state = 318
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubeqContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(LaTeXParser.SubeqContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_subeq




    def subeq(self):

        localctx = LaTeXParser.SubeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_subeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 323
            self.match(LaTeXParser.L_BRACE)
            self.state = 324
            self.expr(0)
            self.state = 325
            self.match(LaTeXParser.EQUAL)
            self.state = 326
            self.expr(0)
            self.state = 327
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[1] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 13)


            if predIndex == 1:
                return self.precpred(self._ctx, 11)


            if predIndex == 2:
                return self.precpred(self._ctx, 10)


            if predIndex == 3:
                return self.precpred(self._ctx, 9)


            if predIndex == 4:
                return self.precpred(self._ctx, 8)


            if predIndex == 5:
                return self.precpred(self._ctx, 7)


            if predIndex == 6:
                return self.precpred(self._ctx, 6)


            if predIndex == 7:
                return self.precpred(self._ctx, 5)


            if predIndex == 8:
                return self.precpred(self._ctx, 4)


            if predIndex == 9:
                return self.precpred(self._ctx, 3)


            if predIndex == 10:
                return self.precpred(self._ctx, 2)


            if predIndex == 11:
                return self.precpred(self._ctx, 12)





